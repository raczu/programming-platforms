@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <input class="form-control my-2" @oninput="@Input" />
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
    <p>Number of warm days: @warmDays</p>
    <button class="btn btn-primary" @onclick="() => WarmDaysFilter(15)">Filter forecast</button>
    <button class="btn btn-primary" @onclick="Restore">Restore forecast</button>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? cached;
    private int warmDays;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
        cached = forecasts;
        warmDays = forecasts.Count(forecast => forecast.TemperatureC > 15);
    }
    
    private void WarmDaysFilter(int temperatureC)
    {
        var filtered = forecasts!.Where(forecast => forecast.TemperatureC < temperatureC).ToArray();
        forecasts = filtered;
    }

    private void Restore()
    {
        forecasts = cached;
    }

    private void Input(ChangeEventArgs arg)
    {
        var input = arg.Value?.ToString();
        Restore();
        if (string.IsNullOrEmpty(input))
        {
            return;
        }
        var filtered = forecasts!.Where(forecast => forecast.Summary!.Contains(input, StringComparison.OrdinalIgnoreCase)).ToArray();
        forecasts = filtered;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}